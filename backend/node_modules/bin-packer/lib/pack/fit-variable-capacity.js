"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nextFitVarCap = void 0;
const prepare_values_1 = require("../util/prepare-values");
const utils_1 = require("../util/utils");
class Bin {
    constructor(id, capacity) {
        this.id = id;
        this.capacity = capacity;
        this.id = id;
        this.capacity = capacity;
        this.utilization = 0;
        this.items = [];
    }
    fits(size) {
        return this.utilization + size <= this.capacity;
    }
    add(item, size) {
        this.items.push(item);
        this.utilization += size;
    }
    isEmpty() {
        return this.length === 0;
    }
    get length() {
        return this.items.length;
    }
}
function nextFitVarCap(obj, sizeOf, capacities) {
    const array = prepare_values_1.prepareValuesNoCapacity(obj, sizeOf);
    const bins = [];
    const oversized = [];
    const unpacked = [];
    const nextBin = (function () {
        const capacitiesIter = prepare_values_1.adaptToNumberIterable(capacities)[Symbol.iterator]();
        let nextBinId = 0;
        return () => {
            const next = capacitiesIter.next();
            if (next.done) {
                return null;
            }
            else {
                return new Bin(nextBinId++, next.value);
            }
        };
    })();
    let currentBin = nextBin();
    if (currentBin === null) {
        throw new Error('Capacities must provide at least one bin capacity');
    }
    let drainToUnreached = false;
    for (const item of array) {
        if (drainToUnreached) {
            unpacked.push(item);
        }
        else {
            const size = sizeOf(item);
            if (currentBin.fits(size)) {
                currentBin.add(item, size);
            }
            else {
                if (currentBin.isEmpty()) {
                    oversized.push(item);
                }
                else {
                    bins.push(currentBin);
                    currentBin = nextBin();
                    if (!currentBin) {
                        oversized.push(item);
                        drainToUnreached = true;
                    }
                    else {
                        if (currentBin.fits(size)) {
                            currentBin.add(item, size);
                        }
                        else {
                            oversized.push(item);
                        }
                    }
                }
            }
        }
    }
    if (currentBin !== null && !currentBin.isEmpty()) {
        bins.push(currentBin);
    }
    return {
        bins: utils_1.sortAscending(bins, bin => bin.id).map(bin => bin.items),
        oversized: oversized,
        unpacked: unpacked
    };
}
exports.nextFitVarCap = nextFitVarCap;
