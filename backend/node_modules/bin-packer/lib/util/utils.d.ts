export declare class SwapPair<T> {
    readonly from: T;
    readonly to: T;
    constructor(from: T, to: T);
    map<U>(f: (t: T) => U): SwapPair<U>;
}
export declare function sortDescending<T>(array: T[], sizeOf: ((t: T) => number)): T[];
export declare function sortAscending<T>(array: T[], sizeOf: ((t: T) => number)): T[];
export declare function sum<T>(array: readonly T[], sizeOf: ((t: T) => number)): number;
export declare function modulo(dividend: number, divisor: number): number;
export declare function groupByBoolean<T>(array: readonly T[], predicate: (t: T) => boolean): [T[], T[]];
export declare function groupByThree<T>(array: readonly T[], index: (t: T) => 0 | 1 | 2): [T[], T[], T[]];
export declare function pushFrom<T>(index: number, from: T[], to: T[]): void;
export declare function duplicates<T, H extends number | string>(array: readonly T[], hash: (t: T) => H): T[];
export declare function missing<T, H extends number | string>(all: T[], subset: T[], hash: (t: T) => H): T[];
export declare function getOrCreate<K, V>(map: Map<K, V>, key: K, valueSupplier: () => V, initializer?: (value: V) => void): V;
export declare function getOrNew<K, V>(map: Map<K, V>, key: K, valueSupplier: () => V): V;
export declare function findIndexFromRight<T>(arr: readonly T[], condition: (t: T) => boolean): number;
export declare function stdDev(array: readonly number[]): number;
export declare function avg(array: readonly number[]): number;
export declare function sumNumeric(array: readonly number[]): number;
